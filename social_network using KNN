{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Ajithkumar9047/email-login/blob/main/KNN_Assignment13.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JolSMtbOfmc9"
      },
      "source": [
        "#Social_Networks_Ads.csv"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "h_3tQC1Kf0ut"
      },
      "source": [
        "**Importing the libraries**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EObl2Z6IfyG4"
      },
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yxzr0NOWf73l"
      },
      "source": [
        "**Importing the dataset**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nN9xC2r6fyMZ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "8aa845cd-c61c-4d96-e725-39acd53f8901"
      },
      "source": [
        "data=pd.read_csv(\"Social_Network_Ads.csv\")\n",
        "data.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    User ID  Gender  Age  EstimatedSalary  Purchased\n",
              "0  15624510    Male   19            19000          0\n",
              "1  15810944    Male   35            20000          0\n",
              "2  15668575  Female   26            43000          0\n",
              "3  15603246  Female   27            57000          0\n",
              "4  15804002    Male   19            76000          0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-eda97ab2-063a-4c06-9fc2-f6a81436dca0\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>User ID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>EstimatedSalary</th>\n",
              "      <th>Purchased</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>15624510</td>\n",
              "      <td>Male</td>\n",
              "      <td>19</td>\n",
              "      <td>19000</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>15810944</td>\n",
              "      <td>Male</td>\n",
              "      <td>35</td>\n",
              "      <td>20000</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>15668575</td>\n",
              "      <td>Female</td>\n",
              "      <td>26</td>\n",
              "      <td>43000</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>15603246</td>\n",
              "      <td>Female</td>\n",
              "      <td>27</td>\n",
              "      <td>57000</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>15804002</td>\n",
              "      <td>Male</td>\n",
              "      <td>19</td>\n",
              "      <td>76000</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-eda97ab2-063a-4c06-9fc2-f6a81436dca0')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-eda97ab2-063a-4c06-9fc2-f6a81436dca0 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-eda97ab2-063a-4c06-9fc2-f6a81436dca0');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Z9gpSZOVfyPX",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "outputId": "3b37184d-01bd-4f1d-e3b4-660c642eb747"
      },
      "source": [
        "data.iloc[:,2:4] #require 2 columns age and salary from my given dataframe"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Age  EstimatedSalary\n",
              "0     19            19000\n",
              "1     35            20000\n",
              "2     26            43000\n",
              "3     27            57000\n",
              "4     19            76000\n",
              "..   ...              ...\n",
              "395   46            41000\n",
              "396   51            23000\n",
              "397   50            20000\n",
              "398   36            33000\n",
              "399   49            36000\n",
              "\n",
              "[400 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a191db4b-69c4-4584-a8f5-e2c03d14cc54\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>EstimatedSalary</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>19</td>\n",
              "      <td>19000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>35</td>\n",
              "      <td>20000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>26</td>\n",
              "      <td>43000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>27</td>\n",
              "      <td>57000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>19</td>\n",
              "      <td>76000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>395</th>\n",
              "      <td>46</td>\n",
              "      <td>41000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>396</th>\n",
              "      <td>51</td>\n",
              "      <td>23000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>397</th>\n",
              "      <td>50</td>\n",
              "      <td>20000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>398</th>\n",
              "      <td>36</td>\n",
              "      <td>33000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>399</th>\n",
              "      <td>49</td>\n",
              "      <td>36000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>400 rows × 2 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a191db4b-69c4-4584-a8f5-e2c03d14cc54')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a191db4b-69c4-4584-a8f5-e2c03d14cc54 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a191db4b-69c4-4584-a8f5-e2c03d14cc54');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.iloc[:,2:4].values # in the form of numpy arrays"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uhQAHmWZJKw7",
        "outputId": "338ed17a-3611-4cd3-dbb9-7e61a1363cbf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[    19,  19000],\n",
              "       [    35,  20000],\n",
              "       [    26,  43000],\n",
              "       [    27,  57000],\n",
              "       [    19,  76000],\n",
              "       [    27,  58000],\n",
              "       [    27,  84000],\n",
              "       [    32, 150000],\n",
              "       [    25,  33000],\n",
              "       [    35,  65000],\n",
              "       [    26,  80000],\n",
              "       [    26,  52000],\n",
              "       [    20,  86000],\n",
              "       [    32,  18000],\n",
              "       [    18,  82000],\n",
              "       [    29,  80000],\n",
              "       [    47,  25000],\n",
              "       [    45,  26000],\n",
              "       [    46,  28000],\n",
              "       [    48,  29000],\n",
              "       [    45,  22000],\n",
              "       [    47,  49000],\n",
              "       [    48,  41000],\n",
              "       [    45,  22000],\n",
              "       [    46,  23000],\n",
              "       [    47,  20000],\n",
              "       [    49,  28000],\n",
              "       [    47,  30000],\n",
              "       [    29,  43000],\n",
              "       [    31,  18000],\n",
              "       [    31,  74000],\n",
              "       [    27, 137000],\n",
              "       [    21,  16000],\n",
              "       [    28,  44000],\n",
              "       [    27,  90000],\n",
              "       [    35,  27000],\n",
              "       [    33,  28000],\n",
              "       [    30,  49000],\n",
              "       [    26,  72000],\n",
              "       [    27,  31000],\n",
              "       [    27,  17000],\n",
              "       [    33,  51000],\n",
              "       [    35, 108000],\n",
              "       [    30,  15000],\n",
              "       [    28,  84000],\n",
              "       [    23,  20000],\n",
              "       [    25,  79000],\n",
              "       [    27,  54000],\n",
              "       [    30, 135000],\n",
              "       [    31,  89000],\n",
              "       [    24,  32000],\n",
              "       [    18,  44000],\n",
              "       [    29,  83000],\n",
              "       [    35,  23000],\n",
              "       [    27,  58000],\n",
              "       [    24,  55000],\n",
              "       [    23,  48000],\n",
              "       [    28,  79000],\n",
              "       [    22,  18000],\n",
              "       [    32, 117000],\n",
              "       [    27,  20000],\n",
              "       [    25,  87000],\n",
              "       [    23,  66000],\n",
              "       [    32, 120000],\n",
              "       [    59,  83000],\n",
              "       [    24,  58000],\n",
              "       [    24,  19000],\n",
              "       [    23,  82000],\n",
              "       [    22,  63000],\n",
              "       [    31,  68000],\n",
              "       [    25,  80000],\n",
              "       [    24,  27000],\n",
              "       [    20,  23000],\n",
              "       [    33, 113000],\n",
              "       [    32,  18000],\n",
              "       [    34, 112000],\n",
              "       [    18,  52000],\n",
              "       [    22,  27000],\n",
              "       [    28,  87000],\n",
              "       [    26,  17000],\n",
              "       [    30,  80000],\n",
              "       [    39,  42000],\n",
              "       [    20,  49000],\n",
              "       [    35,  88000],\n",
              "       [    30,  62000],\n",
              "       [    31, 118000],\n",
              "       [    24,  55000],\n",
              "       [    28,  85000],\n",
              "       [    26,  81000],\n",
              "       [    35,  50000],\n",
              "       [    22,  81000],\n",
              "       [    30, 116000],\n",
              "       [    26,  15000],\n",
              "       [    29,  28000],\n",
              "       [    29,  83000],\n",
              "       [    35,  44000],\n",
              "       [    35,  25000],\n",
              "       [    28, 123000],\n",
              "       [    35,  73000],\n",
              "       [    28,  37000],\n",
              "       [    27,  88000],\n",
              "       [    28,  59000],\n",
              "       [    32,  86000],\n",
              "       [    33, 149000],\n",
              "       [    19,  21000],\n",
              "       [    21,  72000],\n",
              "       [    26,  35000],\n",
              "       [    27,  89000],\n",
              "       [    26,  86000],\n",
              "       [    38,  80000],\n",
              "       [    39,  71000],\n",
              "       [    37,  71000],\n",
              "       [    38,  61000],\n",
              "       [    37,  55000],\n",
              "       [    42,  80000],\n",
              "       [    40,  57000],\n",
              "       [    35,  75000],\n",
              "       [    36,  52000],\n",
              "       [    40,  59000],\n",
              "       [    41,  59000],\n",
              "       [    36,  75000],\n",
              "       [    37,  72000],\n",
              "       [    40,  75000],\n",
              "       [    35,  53000],\n",
              "       [    41,  51000],\n",
              "       [    39,  61000],\n",
              "       [    42,  65000],\n",
              "       [    26,  32000],\n",
              "       [    30,  17000],\n",
              "       [    26,  84000],\n",
              "       [    31,  58000],\n",
              "       [    33,  31000],\n",
              "       [    30,  87000],\n",
              "       [    21,  68000],\n",
              "       [    28,  55000],\n",
              "       [    23,  63000],\n",
              "       [    20,  82000],\n",
              "       [    30, 107000],\n",
              "       [    28,  59000],\n",
              "       [    19,  25000],\n",
              "       [    19,  85000],\n",
              "       [    18,  68000],\n",
              "       [    35,  59000],\n",
              "       [    30,  89000],\n",
              "       [    34,  25000],\n",
              "       [    24,  89000],\n",
              "       [    27,  96000],\n",
              "       [    41,  30000],\n",
              "       [    29,  61000],\n",
              "       [    20,  74000],\n",
              "       [    26,  15000],\n",
              "       [    41,  45000],\n",
              "       [    31,  76000],\n",
              "       [    36,  50000],\n",
              "       [    40,  47000],\n",
              "       [    31,  15000],\n",
              "       [    46,  59000],\n",
              "       [    29,  75000],\n",
              "       [    26,  30000],\n",
              "       [    32, 135000],\n",
              "       [    32, 100000],\n",
              "       [    25,  90000],\n",
              "       [    37,  33000],\n",
              "       [    35,  38000],\n",
              "       [    33,  69000],\n",
              "       [    18,  86000],\n",
              "       [    22,  55000],\n",
              "       [    35,  71000],\n",
              "       [    29, 148000],\n",
              "       [    29,  47000],\n",
              "       [    21,  88000],\n",
              "       [    34, 115000],\n",
              "       [    26, 118000],\n",
              "       [    34,  43000],\n",
              "       [    34,  72000],\n",
              "       [    23,  28000],\n",
              "       [    35,  47000],\n",
              "       [    25,  22000],\n",
              "       [    24,  23000],\n",
              "       [    31,  34000],\n",
              "       [    26,  16000],\n",
              "       [    31,  71000],\n",
              "       [    32, 117000],\n",
              "       [    33,  43000],\n",
              "       [    33,  60000],\n",
              "       [    31,  66000],\n",
              "       [    20,  82000],\n",
              "       [    33,  41000],\n",
              "       [    35,  72000],\n",
              "       [    28,  32000],\n",
              "       [    24,  84000],\n",
              "       [    19,  26000],\n",
              "       [    29,  43000],\n",
              "       [    19,  70000],\n",
              "       [    28,  89000],\n",
              "       [    34,  43000],\n",
              "       [    30,  79000],\n",
              "       [    20,  36000],\n",
              "       [    26,  80000],\n",
              "       [    35,  22000],\n",
              "       [    35,  39000],\n",
              "       [    49,  74000],\n",
              "       [    39, 134000],\n",
              "       [    41,  71000],\n",
              "       [    58, 101000],\n",
              "       [    47,  47000],\n",
              "       [    55, 130000],\n",
              "       [    52, 114000],\n",
              "       [    40, 142000],\n",
              "       [    46,  22000],\n",
              "       [    48,  96000],\n",
              "       [    52, 150000],\n",
              "       [    59,  42000],\n",
              "       [    35,  58000],\n",
              "       [    47,  43000],\n",
              "       [    60, 108000],\n",
              "       [    49,  65000],\n",
              "       [    40,  78000],\n",
              "       [    46,  96000],\n",
              "       [    59, 143000],\n",
              "       [    41,  80000],\n",
              "       [    35,  91000],\n",
              "       [    37, 144000],\n",
              "       [    60, 102000],\n",
              "       [    35,  60000],\n",
              "       [    37,  53000],\n",
              "       [    36, 126000],\n",
              "       [    56, 133000],\n",
              "       [    40,  72000],\n",
              "       [    42,  80000],\n",
              "       [    35, 147000],\n",
              "       [    39,  42000],\n",
              "       [    40, 107000],\n",
              "       [    49,  86000],\n",
              "       [    38, 112000],\n",
              "       [    46,  79000],\n",
              "       [    40,  57000],\n",
              "       [    37,  80000],\n",
              "       [    46,  82000],\n",
              "       [    53, 143000],\n",
              "       [    42, 149000],\n",
              "       [    38,  59000],\n",
              "       [    50,  88000],\n",
              "       [    56, 104000],\n",
              "       [    41,  72000],\n",
              "       [    51, 146000],\n",
              "       [    35,  50000],\n",
              "       [    57, 122000],\n",
              "       [    41,  52000],\n",
              "       [    35,  97000],\n",
              "       [    44,  39000],\n",
              "       [    37,  52000],\n",
              "       [    48, 134000],\n",
              "       [    37, 146000],\n",
              "       [    50,  44000],\n",
              "       [    52,  90000],\n",
              "       [    41,  72000],\n",
              "       [    40,  57000],\n",
              "       [    58,  95000],\n",
              "       [    45, 131000],\n",
              "       [    35,  77000],\n",
              "       [    36, 144000],\n",
              "       [    55, 125000],\n",
              "       [    35,  72000],\n",
              "       [    48,  90000],\n",
              "       [    42, 108000],\n",
              "       [    40,  75000],\n",
              "       [    37,  74000],\n",
              "       [    47, 144000],\n",
              "       [    40,  61000],\n",
              "       [    43, 133000],\n",
              "       [    59,  76000],\n",
              "       [    60,  42000],\n",
              "       [    39, 106000],\n",
              "       [    57,  26000],\n",
              "       [    57,  74000],\n",
              "       [    38,  71000],\n",
              "       [    49,  88000],\n",
              "       [    52,  38000],\n",
              "       [    50,  36000],\n",
              "       [    59,  88000],\n",
              "       [    35,  61000],\n",
              "       [    37,  70000],\n",
              "       [    52,  21000],\n",
              "       [    48, 141000],\n",
              "       [    37,  93000],\n",
              "       [    37,  62000],\n",
              "       [    48, 138000],\n",
              "       [    41,  79000],\n",
              "       [    37,  78000],\n",
              "       [    39, 134000],\n",
              "       [    49,  89000],\n",
              "       [    55,  39000],\n",
              "       [    37,  77000],\n",
              "       [    35,  57000],\n",
              "       [    36,  63000],\n",
              "       [    42,  73000],\n",
              "       [    43, 112000],\n",
              "       [    45,  79000],\n",
              "       [    46, 117000],\n",
              "       [    58,  38000],\n",
              "       [    48,  74000],\n",
              "       [    37, 137000],\n",
              "       [    37,  79000],\n",
              "       [    40,  60000],\n",
              "       [    42,  54000],\n",
              "       [    51, 134000],\n",
              "       [    47, 113000],\n",
              "       [    36, 125000],\n",
              "       [    38,  50000],\n",
              "       [    42,  70000],\n",
              "       [    39,  96000],\n",
              "       [    38,  50000],\n",
              "       [    49, 141000],\n",
              "       [    39,  79000],\n",
              "       [    39,  75000],\n",
              "       [    54, 104000],\n",
              "       [    35,  55000],\n",
              "       [    45,  32000],\n",
              "       [    36,  60000],\n",
              "       [    52, 138000],\n",
              "       [    53,  82000],\n",
              "       [    41,  52000],\n",
              "       [    48,  30000],\n",
              "       [    48, 131000],\n",
              "       [    41,  60000],\n",
              "       [    41,  72000],\n",
              "       [    42,  75000],\n",
              "       [    36, 118000],\n",
              "       [    47, 107000],\n",
              "       [    38,  51000],\n",
              "       [    48, 119000],\n",
              "       [    42,  65000],\n",
              "       [    40,  65000],\n",
              "       [    57,  60000],\n",
              "       [    36,  54000],\n",
              "       [    58, 144000],\n",
              "       [    35,  79000],\n",
              "       [    38,  55000],\n",
              "       [    39, 122000],\n",
              "       [    53, 104000],\n",
              "       [    35,  75000],\n",
              "       [    38,  65000],\n",
              "       [    47,  51000],\n",
              "       [    47, 105000],\n",
              "       [    41,  63000],\n",
              "       [    53,  72000],\n",
              "       [    54, 108000],\n",
              "       [    39,  77000],\n",
              "       [    38,  61000],\n",
              "       [    38, 113000],\n",
              "       [    37,  75000],\n",
              "       [    42,  90000],\n",
              "       [    37,  57000],\n",
              "       [    36,  99000],\n",
              "       [    60,  34000],\n",
              "       [    54,  70000],\n",
              "       [    41,  72000],\n",
              "       [    40,  71000],\n",
              "       [    42,  54000],\n",
              "       [    43, 129000],\n",
              "       [    53,  34000],\n",
              "       [    47,  50000],\n",
              "       [    42,  79000],\n",
              "       [    42, 104000],\n",
              "       [    59,  29000],\n",
              "       [    58,  47000],\n",
              "       [    46,  88000],\n",
              "       [    38,  71000],\n",
              "       [    54,  26000],\n",
              "       [    60,  46000],\n",
              "       [    60,  83000],\n",
              "       [    39,  73000],\n",
              "       [    59, 130000],\n",
              "       [    37,  80000],\n",
              "       [    46,  32000],\n",
              "       [    46,  74000],\n",
              "       [    42,  53000],\n",
              "       [    41,  87000],\n",
              "       [    58,  23000],\n",
              "       [    42,  64000],\n",
              "       [    48,  33000],\n",
              "       [    44, 139000],\n",
              "       [    49,  28000],\n",
              "       [    57,  33000],\n",
              "       [    56,  60000],\n",
              "       [    49,  39000],\n",
              "       [    39,  71000],\n",
              "       [    47,  34000],\n",
              "       [    48,  35000],\n",
              "       [    48,  33000],\n",
              "       [    47,  23000],\n",
              "       [    45,  45000],\n",
              "       [    60,  42000],\n",
              "       [    39,  59000],\n",
              "       [    46,  41000],\n",
              "       [    51,  23000],\n",
              "       [    50,  20000],\n",
              "       [    36,  33000],\n",
              "       [    49,  36000]])"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x=data.iloc[:,2:4].values\n",
        "x.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a7h_ONFDJUQe",
        "outputId": "0fdfff94-597f-4b67-bcd5-f477ee8ef815"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(400, 2)"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y=data.iloc[:,-1].values\n",
        "y.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S-ZzAthOJfoH",
        "outputId": "31d2173b-5e35-49a2-d7f6-2e87a04041a5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(400,)"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_lrDXgjIgGJ3"
      },
      "source": [
        "**Splitting the dataset into the Training set and Test set**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "z2QWVTZUfyUB"
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.20)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_train.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lCURpWOKKH61",
        "outputId": "dc103a90-7588-49d2-ada6-2e7f66f96698"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(320, 2)"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_test.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dFKW6DMsKO4U",
        "outputId": "248e798e-7353-4f09-e1c4-b77e779fdc84"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(80, 2)"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XmzkAVfggNrD"
      },
      "source": [
        "**Feature Scaling**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UZUJ4Xn4fyW6"
      },
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "scaler=StandardScaler()\n",
        "x_train=scaler.fit_transform(x_train)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q77Uw4PDMJb_",
        "outputId": "3238617f-4a5e-4fc1-adb0-a8d5675d0cdd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 0.02681518, -0.56049896],\n",
              "       [ 0.87547155,  1.25850603],\n",
              "       [-0.25607027, -0.27176801],\n",
              "       [-1.10472664,  0.30569389],\n",
              "       [-1.19902179,  0.2768208 ],\n",
              "       [-0.44466058, -0.76261062],\n",
              "       [-0.44466058,  1.25850603],\n",
              "       [ 0.02681518, -0.3006411 ],\n",
              "       [ 1.53553761, -1.25345324],\n",
              "       [-1.67049755, -0.96472229],\n",
              "       [-0.06747997,  0.16132842],\n",
              "       [-0.25607027, -0.73373753],\n",
              "       [ 0.9697667 , -0.99359538],\n",
              "       [ 0.87547155, -1.13796086],\n",
              "       [ 1.06406185,  0.56555175],\n",
              "       [-0.16177512, -0.56049896],\n",
              "       [-0.91613633, -0.73373753],\n",
              "       [-1.29331694, -0.41613348],\n",
              "       [ 0.21540549,  1.08526746],\n",
              "       [-0.06747997,  1.95146031],\n",
              "       [ 0.68688125, -1.25345324],\n",
              "       [-0.06747997,  0.01696294],\n",
              "       [-1.7647927 ,  0.01696294],\n",
              "       [-0.16177512,  0.16132842],\n",
              "       [ 0.30970064, -0.50275277],\n",
              "       [ 1.15835701, -0.73373753],\n",
              "       [ 0.9697667 ,  1.77822174],\n",
              "       [ 1.25265216,  1.86484102],\n",
              "       [ 0.12111034,  1.51836388],\n",
              "       [ 0.21540549,  0.04583604],\n",
              "       [ 1.34694731,  0.59442484],\n",
              "       [ 1.15835701, -1.42669181],\n",
              "       [ 0.7811764 ,  0.76766341],\n",
              "       [ 0.9697667 ,  1.86484102],\n",
              "       [ 2.10130852,  1.11414055],\n",
              "       [-1.5762024 , -1.54218419],\n",
              "       [-1.29331694, -0.41613348],\n",
              "       [ 0.87547155,  2.15357197],\n",
              "       [-0.82184118, -0.76261062],\n",
              "       [ 1.44124246,  2.12469888],\n",
              "       [-1.10472664, -1.08021467],\n",
              "       [ 0.02681518, -0.56049896],\n",
              "       [ 0.30970064,  0.07470913],\n",
              "       [ 0.40399579,  0.30569389],\n",
              "       [ 0.12111034, -0.79148372],\n",
              "       [-0.25607027, -0.878103  ],\n",
              "       [-0.72754603, -1.57105728],\n",
              "       [-0.53895573,  1.89371412],\n",
              "       [-0.25607027, -0.12740253],\n",
              "       [-1.67049755,  0.36344008],\n",
              "       [-0.63325088,  0.56555175],\n",
              "       [ 1.81842307, -1.05134157],\n",
              "       [-1.10472664, -0.76261062],\n",
              "       [ 1.44124246,  0.07470913],\n",
              "       [ 1.34694731, -1.39781871],\n",
              "       [ 0.68688125,  1.77822174],\n",
              "       [ 0.40399579,  0.30569389],\n",
              "       [ 0.02681518, -0.24289491],\n",
              "       [-1.01043149,  0.56555175],\n",
              "       [ 0.30970064, -0.3006411 ],\n",
              "       [-0.25607027,  0.79653651],\n",
              "       [ 1.91271822,  0.73879032],\n",
              "       [ 0.02681518, -0.41613348],\n",
              "       [-0.53895573,  1.37399841],\n",
              "       [-0.25607027,  0.2768208 ],\n",
              "       [-0.72754603, -1.51331109],\n",
              "       [-0.35036542, -0.76261062],\n",
              "       [ 1.53553761,  1.11414055],\n",
              "       [ 1.44124246,  0.99864817],\n",
              "       [-0.25607027, -1.28232633],\n",
              "       [-1.67049755,  0.13245532],\n",
              "       [ 0.9697667 ,  0.76766341],\n",
              "       [-1.10472664,  0.47893246],\n",
              "       [ 2.10130852,  0.94090198],\n",
              "       [ 0.87547155, -1.02246848],\n",
              "       [ 0.12111034, -0.24289491],\n",
              "       [ 0.30970064,  0.07470913],\n",
              "       [ 0.68688125,  0.2768208 ],\n",
              "       [-0.25607027,  0.16132842],\n",
              "       [-0.63325088, -0.09852944],\n",
              "       [ 1.06406185, -1.19570705],\n",
              "       [-0.72754603,  0.30569389],\n",
              "       [ 0.7811764 ,  0.53667865],\n",
              "       [ 0.87547155, -0.56049896],\n",
              "       [-0.82184118, -1.19570705],\n",
              "       [ 0.68688125, -1.08021467],\n",
              "       [-0.06747997,  0.30569389],\n",
              "       [-1.85908785, -0.73373753],\n",
              "       [ 0.12111034,  0.04583604],\n",
              "       [-0.72754603,  1.89371412],\n",
              "       [ 2.00701337, -0.79148372],\n",
              "       [-0.06747997,  0.13245532],\n",
              "       [ 0.68688125, -1.36894562],\n",
              "       [-0.91613633, -0.3006411 ],\n",
              "       [ 0.40399579,  0.2768208 ],\n",
              "       [-1.01043149, -0.3295142 ],\n",
              "       [-1.85908785,  0.47893246],\n",
              "       [ 1.25265216, -1.34007252],\n",
              "       [-0.25607027, -1.36894562],\n",
              "       [ 0.87547155, -1.28232633],\n",
              "       [ 0.30970064, -0.70486443],\n",
              "       [-0.72754603,  1.08526746],\n",
              "       [ 1.72412792,  0.99864817],\n",
              "       [-0.25607027, -0.64711824],\n",
              "       [ 0.21540549, -0.3006411 ],\n",
              "       [-1.10472664, -1.54218419],\n",
              "       [-0.06747997, -0.41613348],\n",
              "       [ 0.21540549,  0.2479477 ],\n",
              "       [ 0.7811764 , -0.82035681],\n",
              "       [-0.25607027, -1.22458014],\n",
              "       [ 0.30970064, -0.18514872],\n",
              "       [ 0.68688125, -0.70486443],\n",
              "       [ 1.91271822,  0.91202889],\n",
              "       [ 0.30970064,  0.2768208 ],\n",
              "       [ 1.72412792,  1.83596793],\n",
              "       [-1.7647927 , -1.4555649 ],\n",
              "       [ 0.02681518,  1.25850603],\n",
              "       [-0.63325088, -1.57105728],\n",
              "       [-0.25607027,  0.04583604],\n",
              "       [-1.01043149,  0.59442484],\n",
              "       [-1.19902179,  0.50780556],\n",
              "       [-1.19902179, -1.36894562],\n",
              "       [ 0.21540549, -0.35838729],\n",
              "       [-0.25607027, -0.41613348],\n",
              "       [ 0.12111034,  1.86484102],\n",
              "       [-0.16177512, -1.05134157],\n",
              "       [ 1.81842307, -0.27176801],\n",
              "       [ 0.30970064,  0.07470913],\n",
              "       [-0.25607027, -0.9069761 ],\n",
              "       [-0.25607027,  0.62329794],\n",
              "       [-1.29331694, -1.4555649 ],\n",
              "       [ 0.59258609,  2.0092065 ],\n",
              "       [ 0.9697667 ,  0.13245532],\n",
              "       [ 0.40399579,  1.11414055],\n",
              "       [-1.7647927 , -1.39781871],\n",
              "       [ 2.10130852, -0.79148372],\n",
              "       [ 0.87547155, -1.34007252],\n",
              "       [-0.91613633,  0.45005937],\n",
              "       [-0.91613633, -0.41613348],\n",
              "       [-1.19902179,  0.30569389],\n",
              "       [-1.19902179, -1.05134157],\n",
              "       [-0.25607027,  2.24019126],\n",
              "       [ 0.40399579, -0.15627563],\n",
              "       [-0.25607027,  0.07470913],\n",
              "       [-1.10472664,  0.30569389],\n",
              "       [-0.25607027, -0.3295142 ],\n",
              "       [ 1.91271822,  2.15357197],\n",
              "       [ 0.30970064, -0.27176801],\n",
              "       [-0.72754603,  0.56555175],\n",
              "       [ 1.62983276, -0.878103  ],\n",
              "       [-1.5762024 , -0.04078325],\n",
              "       [-1.38761209, -0.18514872],\n",
              "       [-0.25607027, -1.34007252],\n",
              "       [-0.72754603,  1.34512531],\n",
              "       [-0.72754603, -0.21402182],\n",
              "       [-1.38761209, -1.42669181],\n",
              "       [ 0.21540549, -0.35838729],\n",
              "       [-0.16177512, -0.27176801],\n",
              "       [ 0.40399579,  0.10358223],\n",
              "       [-1.10472664, -0.99359538],\n",
              "       [-1.10472664, -0.50275277],\n",
              "       [-1.10472664,  0.07470913],\n",
              "       [-0.35036542,  1.31625222],\n",
              "       [ 1.34694731,  1.9803334 ],\n",
              "       [ 0.12111034, -0.79148372],\n",
              "       [ 0.40399579, -0.12740253],\n",
              "       [ 2.10130852, -1.02246848],\n",
              "       [ 2.00701337,  0.39231318],\n",
              "       [ 0.87547155, -1.42669181],\n",
              "       [-0.25607027,  0.53667865],\n",
              "       [ 0.02681518, -0.24289491],\n",
              "       [ 2.10130852, -0.67599134],\n",
              "       [ 0.9697667 ,  2.06695269],\n",
              "       [ 1.72412792, -0.27176801],\n",
              "       [ 0.9697667 , -0.82035681],\n",
              "       [-0.44466058, -1.10908776],\n",
              "       [ 1.91271822, -0.9069761 ],\n",
              "       [ 1.06406185, -0.96472229],\n",
              "       [-1.5762024 ,  0.53667865],\n",
              "       [-0.06747997,  2.15357197],\n",
              "       [ 1.06406185, -0.12740253],\n",
              "       [-0.16177512,  2.15357197],\n",
              "       [-0.82184118,  2.26906435],\n",
              "       [-0.06747997, -0.50275277],\n",
              "       [ 1.34694731, -0.9069761 ],\n",
              "       [ 1.53553761,  0.01696294],\n",
              "       [ 0.02681518,  0.04583604],\n",
              "       [ 0.02681518, -0.12740253],\n",
              "       [ 1.15835701, -0.96472229],\n",
              "       [-1.48190725, -1.484438  ],\n",
              "       [-1.5762024 ,  0.07470913],\n",
              "       [-0.63325088, -0.3295142 ],\n",
              "       [-1.67049755,  0.36344008],\n",
              "       [ 0.7811764 , -1.08021467],\n",
              "       [-0.82184118,  0.39231318],\n",
              "       [-0.35036542, -1.28232633],\n",
              "       [ 2.00701337,  2.12469888],\n",
              "       [ 0.7811764 , -0.3006411 ],\n",
              "       [-0.06747997,  0.21907461],\n",
              "       [-1.10472664,  1.4028715 ],\n",
              "       [ 1.15835701,  0.53667865],\n",
              "       [ 0.21540549, -0.27176801],\n",
              "       [-1.10472664, -1.13796086],\n",
              "       [-0.25607027,  0.16132842],\n",
              "       [ 2.00701337,  1.74934864],\n",
              "       [-1.01043149, -1.42669181],\n",
              "       [ 0.7811764 , -1.36894562],\n",
              "       [-0.35036542,  1.22963293],\n",
              "       [-0.63325088,  0.13245532],\n",
              "       [ 0.12111034,  0.04583604],\n",
              "       [-0.06747997,  0.30569389],\n",
              "       [ 0.9697667 , -1.13796086],\n",
              "       [-1.38761209,  0.36344008],\n",
              "       [-1.29331694, -1.08021467],\n",
              "       [-1.01043149,  0.76766341],\n",
              "       [-0.63325088,  0.19020151],\n",
              "       [ 0.21540549,  0.07470913],\n",
              "       [-1.29331694,  0.42118627],\n",
              "       [ 0.30970064,  0.30569389],\n",
              "       [ 0.40399579, -0.44500658],\n",
              "       [-0.53895573,  0.47893246],\n",
              "       [-0.44466058, -1.19570705],\n",
              "       [-0.16177512,  1.60498317],\n",
              "       [-0.91613633,  0.56555175],\n",
              "       [ 1.06406185,  0.47893246],\n",
              "       [-1.29331694, -1.34007252],\n",
              "       [-1.85908785,  0.36344008],\n",
              "       [-0.63325088, -1.02246848],\n",
              "       [-0.06747997,  0.2479477 ],\n",
              "       [ 1.06406185,  0.13245532],\n",
              "       [ 1.62983276,  1.60498317],\n",
              "       [-0.63325088,  0.04583604],\n",
              "       [ 0.30970064, -0.50275277],\n",
              "       [-0.44466058,  2.29793745],\n",
              "       [ 1.34694731,  2.32681054],\n",
              "       [ 0.12111034, -0.3006411 ],\n",
              "       [-0.82184118, -0.24289491],\n",
              "       [ 0.7811764 ,  0.13245532],\n",
              "       [-1.10472664, -1.51331109],\n",
              "       [-1.29331694,  0.56555175],\n",
              "       [-0.16177512, -0.18514872],\n",
              "       [-1.01043149, -0.35838729],\n",
              "       [ 0.40399579,  0.59442484],\n",
              "       [ 2.00701337,  0.53667865],\n",
              "       [ 0.12111034,  1.86484102],\n",
              "       [-0.25607027, -0.47387967],\n",
              "       [ 0.12111034,  0.21907461],\n",
              "       [-1.48190725,  0.33456699],\n",
              "       [-1.7647927 , -1.25345324],\n",
              "       [-0.91613633,  0.42118627],\n",
              "       [-0.16177512,  1.4028715 ],\n",
              "       [-0.91613633, -0.93584919],\n",
              "       [-1.38761209, -0.61824515],\n",
              "       [-0.91613633, -0.3006411 ],\n",
              "       [ 0.40399579, -0.12740253],\n",
              "       [ 0.49829094,  1.72047555],\n",
              "       [ 0.59258609, -0.878103  ],\n",
              "       [-1.85908785, -0.04078325],\n",
              "       [-0.82184118, -0.76261062],\n",
              "       [-0.91613633,  0.50780556],\n",
              "       [-1.38761209, -0.09852944],\n",
              "       [ 0.40399579, -0.47387967],\n",
              "       [-1.67049755, -1.34007252],\n",
              "       [-0.44466058, -0.01191015],\n",
              "       [ 0.7811764 , -1.19570705],\n",
              "       [ 2.10130852, -0.79148372],\n",
              "       [ 0.02681518,  0.30569389],\n",
              "       [ 0.87547155,  1.08526746],\n",
              "       [-1.10472664,  0.33456699],\n",
              "       [ 1.44124246,  0.36344008],\n",
              "       [-0.16177512, -0.50275277],\n",
              "       [ 0.12111034,  0.2768208 ],\n",
              "       [-1.01043149, -1.10908776],\n",
              "       [-0.25607027,  0.07470913],\n",
              "       [ 0.9697667 , -1.05134157],\n",
              "       [-0.16177512,  1.63385626],\n",
              "       [-0.25607027, -0.35838729],\n",
              "       [-0.44466058, -0.53162586],\n",
              "       [-0.16177512, -0.44500658],\n",
              "       [-1.01043149, -0.3295142 ],\n",
              "       [-1.01043149,  1.95146031],\n",
              "       [ 0.9697667 , -1.05134157],\n",
              "       [-0.25607027, -0.3006411 ],\n",
              "       [-1.7647927 , -1.28232633],\n",
              "       [-0.91613633,  1.54723698],\n",
              "       [ 0.87547155, -0.76261062],\n",
              "       [ 0.30970064,  0.04583604],\n",
              "       [ 0.21540549,  0.16132842],\n",
              "       [ 0.7811764 ,  0.36344008],\n",
              "       [ 1.06406185, -0.878103  ],\n",
              "       [ 0.68688125, -1.36894562],\n",
              "       [ 0.7811764 ,  1.37399841],\n",
              "       [ 0.21540549, -0.12740253],\n",
              "       [-0.82184118,  0.39231318],\n",
              "       [ 2.00701337, -1.16683395],\n",
              "       [ 1.81842307,  1.51836388],\n",
              "       [-1.85908785, -0.50275277],\n",
              "       [-0.06747997,  0.2768208 ],\n",
              "       [-0.53895573,  2.32681054],\n",
              "       [-0.53895573,  0.88315579],\n",
              "       [-0.25607027,  0.10358223],\n",
              "       [ 0.30970064,  0.07470913],\n",
              "       [-1.67049755,  0.47893246],\n",
              "       [ 1.62983276,  1.74934864],\n",
              "       [ 0.7811764 , -1.34007252],\n",
              "       [ 0.87547155, -0.58937205],\n",
              "       [-1.29331694, -1.22458014],\n",
              "       [-0.44466058, -0.82035681],\n",
              "       [ 0.12111034,  0.76766341],\n",
              "       [-0.06747997,  2.21131816],\n",
              "       [-0.06747997,  0.68104413],\n",
              "       [-1.10472664,  0.42118627],\n",
              "       [ 1.06406185, -1.19570705],\n",
              "       [ 0.21540549,  2.09582578],\n",
              "       [ 0.9697667 ,  1.9803334 ],\n",
              "       [ 0.21540549,  0.16132842],\n",
              "       [ 1.81842307, -1.25345324],\n",
              "       [-1.10472664, -1.57105728],\n",
              "       [-0.25607027, -0.56049896],\n",
              "       [-1.10472664, -1.57105728]])"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_test=scaler.fit_transform(x_test)\n",
        "x_test"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "40elTQmEMWGO",
        "outputId": "8a90e9bf-0ed5-492b-a5a3-8ad8b6066482"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 4.63071299e-01, -5.40061091e-01],\n",
              "       [-1.05105829e+00, -5.40061091e-01],\n",
              "       [ 3.62129327e-01,  5.04452667e-01],\n",
              "       [ 4.63071299e-01, -3.36301778e-02],\n",
              "       [-2.43522509e-01,  1.16914324e+00],\n",
              "       [ 1.16966511e+00,  5.36104599e-01],\n",
              "       [ 1.06872313e+00,  1.51731449e+00],\n",
              "       [-4.16385637e-02, -2.86845634e-01],\n",
              "       [-5.46348427e-01, -1.67953065e+00],\n",
              "       [ 1.47249103e+00,  1.35905483e+00],\n",
              "       [ 5.64013272e-01,  1.29575097e+00],\n",
              "       [-1.85859407e+00,  1.56281415e-01],\n",
              "       [ 5.64013272e-01,  1.96044154e+00],\n",
              "       [-1.75765210e+00, -6.98320751e-01],\n",
              "       [ 1.60245381e-01,  6.13256184e-02],\n",
              "       [-4.16385637e-02, -4.45105295e-01],\n",
              "       [ 8.66839190e-01,  2.51237211e-01],\n",
              "       [-1.55576815e+00, -2.55193702e-01],\n",
              "       [ 4.63071299e-01,  2.46687246e+00],\n",
              "       [-2.43522509e-01, -1.61622678e+00],\n",
              "       [-1.42580536e-01,  8.84275852e-01],\n",
              "       [ 9.67781162e-01, -6.35016887e-01],\n",
              "       [ 3.62129327e-01, -1.29970746e+00],\n",
              "       [ 9.67781162e-01, -7.61624615e-01],\n",
              "       [-1.85859407e+00,  4.41148803e-01],\n",
              "       [-4.16385637e-02, -1.97824575e-03],\n",
              "       [ 2.07814286e+00, -7.61624615e-01],\n",
              "       [ 1.37154905e+00,  2.37191666e+00],\n",
              "       [-6.47290399e-01,  1.48566256e+00],\n",
              "       [-4.45406454e-01, -3.50149498e-01],\n",
              "       [ 3.62129327e-01, -6.35016887e-01],\n",
              "       [ 2.61187354e-01, -4.45105295e-01],\n",
              "       [ 1.57343300e+00, -1.17309973e+00],\n",
              "       [-1.45482618e+00, -1.36301132e+00],\n",
              "       [-2.43522509e-01,  1.87933347e-01],\n",
              "       [ 2.61187354e-01, -7.61624615e-01],\n",
              "       [-5.46348427e-01,  1.45401063e+00],\n",
              "       [ 1.06872313e+00,  5.99408463e-01],\n",
              "       [-2.43522509e-01, -3.18497566e-01],\n",
              "       [ 1.60245381e-01,  1.10583938e+00],\n",
              "       [-1.35388421e+00, -4.13453363e-01],\n",
              "       [-5.46348427e-01, -1.67953065e+00],\n",
              "       [-1.55576815e+00, -5.08409159e-01],\n",
              "       [ 1.67437497e+00,  1.04253551e+00],\n",
              "       [ 5.93034089e-02,  1.29575097e+00],\n",
              "       [ 1.06872313e+00, -1.33135939e+00],\n",
              "       [-3.44464481e-01, -8.88232344e-01],\n",
              "       [-8.49174344e-01, -7.61624615e-01],\n",
              "       [ 2.17908483e+00,  1.56281415e-01],\n",
              "       [ 4.63071299e-01,  1.04253551e+00],\n",
              "       [-1.05105829e+00,  4.09496871e-01],\n",
              "       [ 5.93034089e-02, -1.97824575e-03],\n",
              "       [-4.16385637e-02,  2.96736863e-02],\n",
              "       [ 1.16966511e+00,  2.21365700e+00],\n",
              "       [ 5.93034089e-02, -6.35016887e-01],\n",
              "       [-5.46348427e-01,  1.54896643e+00],\n",
              "       [-2.43522509e-01, -6.66668819e-01],\n",
              "       [-1.25294223e+00,  5.99408463e-01],\n",
              "       [-1.05105829e+00,  5.36104599e-01],\n",
              "       [-9.50116317e-01,  2.51237211e-01],\n",
              "       [-1.05105829e+00, -1.71118258e+00],\n",
              "       [ 4.63071299e-01,  1.24629482e-01],\n",
              "       [-4.16385637e-02, -5.71713023e-01],\n",
              "       [-4.16385637e-02, -1.20475166e+00],\n",
              "       [-3.44464481e-01,  2.96736863e-02],\n",
              "       [-6.47290399e-01, -9.69340419e-02],\n",
              "       [-8.49174344e-01,  2.82889143e-01],\n",
              "       [ 1.97720089e+00,  9.29775504e-02],\n",
              "       [ 2.61187354e-01, -3.18497566e-01],\n",
              "       [-7.48232372e-01,  2.51237211e-01],\n",
              "       [ 9.67781162e-01,  1.07418744e+00],\n",
              "       [-6.47290399e-01, -1.67953065e+00],\n",
              "       [ 2.07814286e+00, -1.52127098e+00],\n",
              "       [ 2.28002681e+00,  3.77844939e-01],\n",
              "       [-7.48232372e-01,  5.04452667e-01],\n",
              "       [-8.49174344e-01,  1.24629482e-01],\n",
              "       [-9.50116317e-01, -1.23640360e+00],\n",
              "       [-7.48232372e-01, -6.98320751e-01],\n",
              "       [-1.55576815e+00, -1.39466326e+00],\n",
              "       [ 1.60245381e-01,  1.24629482e-01]])"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np.sqrt(x_train.shape[0])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "l5kWGcQeMoh5",
        "outputId": "794e0735-ea15-4f5a-872c-7fb7f1e1815c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "17.88854381999832"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BWpz-G_KgaB5"
      },
      "source": [
        "**Fitting K-NN to the Training set**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5Wo68lCqfyc6"
      },
      "source": [
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "k=17\n",
        "knn=KNeighborsClassifier(n_neighbors=k)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "knn.fit(x_train,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f8IonCR4NKSf",
        "outputId": "f461c1f2-9538-4571-c57a-2de19a224aab"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "KNeighborsClassifier(n_neighbors=17)"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GoGxoF-kgmlj"
      },
      "source": [
        "**Predicting the Test set results**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aEOlRLkefye3"
      },
      "source": [
        "y_pred=knn.predict(x_test)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7Omm56ioNq9d",
        "outputId": "fa043a58-8425-448c-96de-ef58a2f0c3ac"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1,\n",
              "       1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1,\n",
              "       1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
              "       0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0])"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BjkoTpdBNxKT",
        "outputId": "1f679a37-89b3-4bbf-f269-d4bf3b93a779"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(80,)"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import accuracy_score\n",
        "accuracy_score(y_test,y_pred)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "otctZC7WN8bP",
        "outputId": "2f29f03c-5f87-4c36-b19c-80ef28dc92c5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.875"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cYfKp7MQgwX7"
      },
      "source": [
        "**Making the Confusion Matrix**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zFhgq3Yufyh5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e67377ef-bfd5-47dc-d73a-fe75efbee853"
      },
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "confusion_matrix(y_test,y_pred)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[48,  7],\n",
              "       [ 3, 22]])"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sp18d2Zhg4Me"
      },
      "source": [
        "#2nd method\n",
        "accuracy=[]\n",
        "for i in range(1,26):\n",
        "  knn=KNeighborsClassifier(n_neighbors=i)\n",
        "  knn.fit(x_train,y_train)\n",
        "  accuracy.append(accuracy_score(y_test,knn.predict(x_test)))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "accuracy"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MrShuYKPPXy6",
        "outputId": "0596ef0e-bb64-4d17-fa2b-5f77688b311d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.8125,\n",
              " 0.85,\n",
              " 0.9,\n",
              " 0.8875,\n",
              " 0.8625,\n",
              " 0.8625,\n",
              " 0.875,\n",
              " 0.875,\n",
              " 0.8875,\n",
              " 0.875,\n",
              " 0.875,\n",
              " 0.875,\n",
              " 0.875,\n",
              " 0.875,\n",
              " 0.875,\n",
              " 0.875,\n",
              " 0.875,\n",
              " 0.875,\n",
              " 0.875,\n",
              " 0.875,\n",
              " 0.875,\n",
              " 0.875,\n",
              " 0.875,\n",
              " 0.875,\n",
              " 0.875]"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len(accuracy)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rWvbGEqdPayb",
        "outputId": "975b8cce-c9bb-441c-bbe8-8e681607453b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "25"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(range(1,26),accuracy)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "id": "ngHKlo5rPhOR",
        "outputId": "8828ac74-c323-4c24-da30-4baa1c343f06"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7fd7c9cb0e50>]"
            ]
          },
          "metadata": {},
          "execution_count": 25
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "knn=KNeighborsClassifier(n_neighbors=11)\n",
        "knn.fit(x_train,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qSFJJvS9Pz4a",
        "outputId": "c087b5ed-633b-4c28-9d90-84c2bcb1917b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "KNeighborsClassifier(n_neighbors=11)"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred=knn.predict(x_test)"
      ],
      "metadata": {
        "id": "jXHhg0_AQFF3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "accuracy_score(y_test,y_pred)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-4LLGjKVQK2p",
        "outputId": "bd7bfa82-a20e-4fa5-f503-e879cb15203a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.875"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    }
  ]
}
